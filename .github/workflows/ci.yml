name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort

    - name: Run linters
      run: |
        ruff check .
        black --check .
        isort --check-only .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit

    - name: Run security checks
      run: |
        pip-audit
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json || true

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: views-forecast-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm views-forecast-api:latest python -c "from app.main import app; print('App imported successfully')"

  api-test:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    services:
      api:
        image: views-forecast-api:latest
        ports:
          - 8000:8000
        options: --health-cmd "curl -f http://localhost:8000/health || exit 1"

    steps:
    - uses: actions/checkout@v4

    - name: Wait for API
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'

    - name: Test API endpoints
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/ready
        curl -f http://localhost:8000/api/v1/metadata/months || true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, security, build-docker]
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your infrastructure"
        # Add your deployment commands here
        # Examples:
        # - Deploy to AWS ECS/EKS
        # - Deploy to Google Cloud Run
        # - Deploy to Azure Container Instances
        # - Deploy to Heroku
        # - Deploy to DigitalOcean App Platform